---
const userRegion = "EU"
const userRealm = "Silvermoon"
const userName ="Titanbeard"
const apiCall = await fetch('https://raider.io/api/v1/characters/profile?region=' +userRegion+ '&realm=' +userRealm+ '&name=' +userName+ '&fields=mythic_plus_best_runs:all,mythic_plus_alternate_runs:all')
const data = await apiCall.json();

const userKeyLevel = 15

const dungeons = {
  d0: "Algeth'ar Academy",
  d1: "Court of Stars",
  d2: "Halls of Valor",
  d3: "Ruby Life Pools",
  d4: "Shadowmoon Burial Grounds",
  d5: "Temple of the Jade Serpent",
  d6: "The Azure Vault",
  d7: "The Nokhud Offensive",
};

//create arrays for fort and tyr runs
let fortRunsExtracted = [];
let tyrRunsExtracted = [];

//extract from best runs to relevant array

function extractBestRuns(){
    let bestRunsData = data.mythic_plus_best_runs;
    for(let i=0; i<bestRunsData.length; i++){
        let specificObject={};

        specificObject.dungeon = bestRunsData[i].dungeon;
        specificObject.keyLevel = bestRunsData[i].mythic_level;
        specificObject.score = bestRunsData[i].score;
        specificObject.affixWeek = bestRunsData[i].affixes[0].name;
        specificObject.upgrades = bestRunsData[i].num_keystone_upgrades;
        specificObject.completeTime = bestRunsData[i].clear_time_ms;
        specificObject.parTime = bestRunsData[i].par_time_ms;

        if (specificObject.affixWeek === "Fortified"){
        fortRunsExtracted.push(specificObject);
        } else {
        tyrRunsExtracted.push(specificObject);
        }
}};

//extract from alt runs to relevant array

function extractAltRuns(){
    let altRunsData = data.mythic_plus_alternate_runs;
    for(let i=0; i<altRunsData.length; i++){
        let specificObject={};

        specificObject.dungeon = altRunsData[i].dungeon;
        specificObject.keyLevel = altRunsData[i].mythic_level;
        specificObject.score = altRunsData[i].score;
        specificObject.affixWeek = altRunsData[i].affixes[0].name;
        specificObject.upgrades = altRunsData[i].num_keystone_upgrades;
        specificObject.completeTime = altRunsData[i].clear_time_ms;
        specificObject.parTime = altRunsData[i].par_time_ms;

        if (specificObject.affixWeek === "Tyrannical"){
            tyrRunsExtracted.push(specificObject);
        } else {
            fortRunsExtracted.push(specificObject);
        }
    }
};

extractAltRuns();
extractBestRuns();

//sort arrays by dungeon alphabetically
function sortFort(){
    fortRunsExtracted.sort((a,b) => {
        const nameA = a.dungeon.toUpperCase(); // ignore upper and lowercase
        const nameB = b.dungeon.toUpperCase(); // ignore upper and lowercase
        if (nameA < nameB) {
            return -1;
        }
        if (nameA > nameB) {
            return 1;
        }
        // names must be equal
        return 0;
    });
}

function sortTyr(){
    tyrRunsExtracted.sort((a,b) => {
        const nameA = a.dungeon.toUpperCase(); // ignore upper and lowercase
        const nameB = b.dungeon.toUpperCase(); // ignore upper and lowercase
        if (nameA < nameB) {
            return -1;
        }
        if (nameA > nameB) {
            return 1;
        }
        // names must be equal
        return 0;
    });
}

sortFort();
sortTyr();

//computes the weighted scores for m+ rating

function weightScores(){
    for (let i=0; i<fortRunsExtracted.length; i++){
    let score1 = fortRunsExtracted[i].score;
    let score2 = tyrRunsExtracted[i].score;

    if (score1 > score2) {
        fortRunsExtracted[i].weightedScore = (score1*1.5);
        fortRunsExtracted[i].isBest = true;
        tyrRunsExtracted[i].weightedScore = (score1*0.5);
        tyrRunsExtracted[i].isBest = false;        
    } else if (score2 > score1) {
        fortRunsExtracted[i].weightedScore = (score1*0.5);
        fortRunsExtracted[i].isBest = false;
        tyrRunsExtracted[i].weightedScore = (score1*1.5);
        tyrRunsExtracted[i].isBest = true; 
    } else {
        fortRunsExtracted[i].weightedScore = score1;
        fortRunsExtracted[i].isBest = true;
        tyrRunsExtracted[i].weightedScore = score2;
        tyrRunsExtracted[i].isBest = true; 
    }
    } 
}

weightScores();

function weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,keyLevel){

    //calculates base score for timing a key (minimum possible timing)
    let completionScore = null;
    const dungeonBaseScores = [0,40,45,55,60,65,75,80,85,100];

    if (keyLevel<=10){
        completionScore = dungeonBaseScores[keyLevel];
    } else {
        completionScore = (100 + 7*(keyLevel-10)) 
    }  
    //checks if calculated score will be new best and returns the weighted gain
    let compScore = completionScore;
    let baseTyr = tyrCurrentBase;
    let baseFort = fortCurrentBase;
    let testAffix = affix;
    let weightedGain = null;
    if (testAffix === "Fortified" && baseFort>baseTyr) {
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix==="Tyrannical" && baseTyr>baseFort) {
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - ((baseFort*0.5)+(baseTyr*1.5));
    } else if (testAffix === "Fortified" && baseTyr>baseFort && compScore>baseTyr){
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - ((baseTyr*1.5)+(baseFort*0.5));
    } else if (testAffix === "Fortified" && baseTyr>baseFort && compScore<baseTyr ) {
        weightedGain = ((compScore*0.5)+(baseTyr*1.5)) - ((baseTyr*1.5)+(baseFort*0.5));
    } else if (testAffix === "Tyrannical" && baseFort>baseTyr && compScore>baseFort){
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix === "Tyrannical" && baseFort>baseTyr && compScore<baseFort){
        weightedGain = ((compScore*0.5)+(baseFort*1.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix === "Fortified" && baseFort===baseTyr) {
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - (baseFort+baseTyr);
    } else if (testAffix==="Tyrannical" && baseTyr===baseFort) {
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - (baseFort+baseTyr);
    }

    if (weightedGain<0){
        return 0;
    } else {
        return weightedGain;
    }
}

function generateNextKeyGains() {
    for (let i=0; i<fortRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Fortified";
        let level = fortRunsExtracted[i].keyLevel + 1;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        fortRunsExtracted[i].nextKeyGain = weightedGain;
    }
        for (let i=0; i<tyrRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Tyrannical";
        let level = tyrRunsExtracted[i].keyLevel + 1;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        tyrRunsExtracted[i].nextKeyGain = weightedGain;
    }
}

generateNextKeyGains();

function generateUserKeyGains() {
    for (let i=0; i<fortRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Fortified";
        let level = userKeyLevel;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        fortRunsExtracted[i].userKeyGain = weightedGain;
    }
        for (let i=0; i<tyrRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Tyrannical";
        let level = userKeyLevel;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        tyrRunsExtracted[i].userKeyGain = weightedGain;
    }
}

generateUserKeyGains();

---

<table>
  <thead>
    <tr>
      <th rowspan="2">Dungeon</th>
      <th colspan="2">Current Fortified Score</th>
      <th colspan="2">Current Tyrannical Score</th>
      <th colspan="2">Gain next key</th>
      <th colspan="2">Gain user key level({userKeyLevel})</th>
    </tr>
    <tr>
      <th>Key Level</th>
      <th>Score</th>
      <th>Key Level</th>
      <th>Score</th>
      <th>Fortified</th>
      <th>Tyrannical</th>
      <th>Fortified</th>
      <th>Tyrannical</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>{dungeons.d0}</td>
      <td>{fortRunsExtracted[0].keyLevel}</td>
      <td>{fortRunsExtracted[0].weightedScore.toFixed(1)}</td>
      <td>{tyrRunsExtracted[0].keyLevel}</td>
      <td>{tyrRunsExtracted[0].weightedScore.toFixed(1)}</td>
      <td>{fortRunsExtracted[0].nextKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[0].nextKeyGain.toFixed(1)}</td>
      <td>{fortRunsExtracted[0].userKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[0].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td>{dungeons.d1}</td>
      <td>{fortRunsExtracted[1].keyLevel}</td>
      <td>{fortRunsExtracted[1].weightedScore.toFixed(1)}</td>
      <td>{tyrRunsExtracted[1].keyLevel}</td>
      <td>{tyrRunsExtracted[1].weightedScore.toFixed(1)}</td>
      <td>{fortRunsExtracted[1].nextKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[1].nextKeyGain.toFixed(1)}</td>
      <td>{fortRunsExtracted[1].userKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[1].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td>{dungeons.d2}</td>
      <td>{fortRunsExtracted[2].keyLevel}</td>
      <td>{fortRunsExtracted[2].weightedScore.toFixed(1)}</td>
      <td>{tyrRunsExtracted[2].keyLevel}</td>
      <td>{tyrRunsExtracted[2].weightedScore.toFixed(1)}</td>
      <td>{fortRunsExtracted[2].nextKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[2].nextKeyGain.toFixed(1)}</td>
      <td>{fortRunsExtracted[2].userKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[2].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td>{dungeons.d3}</td>
      <td>{fortRunsExtracted[3].keyLevel}</td>
      <td>{fortRunsExtracted[3].weightedScore.toFixed(1)}</td>
      <td>{tyrRunsExtracted[3].keyLevel}</td>
      <td>{tyrRunsExtracted[3].weightedScore.toFixed(1)}</td>
      <td>{fortRunsExtracted[3].nextKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[3].nextKeyGain.toFixed(1)}</td>
      <td>{fortRunsExtracted[3].userKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[3].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td>{dungeons.d4}</td>
      <td>{fortRunsExtracted[4].keyLevel}</td>
      <td>{fortRunsExtracted[4].weightedScore.toFixed(1)}</td>
      <td>{tyrRunsExtracted[4].keyLevel}</td>
      <td>{tyrRunsExtracted[4].weightedScore.toFixed(1)}</td>
      <td>{fortRunsExtracted[4].nextKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[4].nextKeyGain.toFixed(1)}</td>
      <td>{fortRunsExtracted[4].userKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[4].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td>{dungeons.d5}</td>
      <td>{fortRunsExtracted[5].keyLevel}</td>
      <td>{fortRunsExtracted[5].weightedScore.toFixed(1)}</td>
      <td>{tyrRunsExtracted[5].keyLevel}</td>
      <td>{tyrRunsExtracted[5].weightedScore.toFixed(1)}</td>
      <td>{fortRunsExtracted[5].nextKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[5].nextKeyGain.toFixed(1)}</td>
      <td>{fortRunsExtracted[5].userKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[5].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td>{dungeons.d6}</td>
      <td>{fortRunsExtracted[6].keyLevel}</td>
      <td>{fortRunsExtracted[6].weightedScore.toFixed(1)}</td>
      <td>{tyrRunsExtracted[6].keyLevel}</td>
      <td>{tyrRunsExtracted[6].weightedScore.toFixed(1)}</td>
      <td>{fortRunsExtracted[6].nextKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[6].nextKeyGain.toFixed(1)}</td>
      <td>{fortRunsExtracted[6].userKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[6].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td>{dungeons.d7}</td>
      <td>{fortRunsExtracted[7].keyLevel}</td>
      <td>{fortRunsExtracted[7].weightedScore.toFixed(1)}</td>
      <td>{tyrRunsExtracted[7].keyLevel}</td>
      <td>{tyrRunsExtracted[7].weightedScore.toFixed(1)}</td>
      <td>{fortRunsExtracted[7].nextKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[7].nextKeyGain.toFixed(1)}</td>
      <td>{fortRunsExtracted[7].userKeyGain.toFixed(1)}</td>
      <td>{tyrRunsExtracted[7].userKeyGain.toFixed(1)}</td>
    </tr>
  </tbody>
</table>
