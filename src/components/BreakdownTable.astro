---
const {userRegion,userRealm,userName,userKey} = Astro.props;
//TODO - catch a 200 response from the raider.io API
const apiCall = await fetch('https://raider.io/api/v1/characters/profile?region=' +userRegion+ '&realm=' +userRealm+ '&name=' +userName+ '&fields=mythic_plus_best_runs:all,mythic_plus_alternate_runs:all')
const data = await apiCall.json();

const userKeyLevel = 14

const dungeons = ["Algeth'ar Academy", "Court of Stars","Halls of Valor","Ruby Life Pools","Shadowmoon Burial Grounds","Temple of the Jade Serpent","The Azure Vault","The Nokhud Offensive",];

//create arrays for fort and tyr runs
let fortRunsExtracted = [];
let tyrRunsExtracted = [];

//extract from best runs to relevant array

function extractBestRuns(){
    let bestRunsData = data.mythic_plus_best_runs;
    for(let i=0; i<bestRunsData.length; i++){
        let specificObject={};

        specificObject.dungeon = bestRunsData[i].dungeon;
        specificObject.keyLevel = bestRunsData[i].mythic_level;
        specificObject.score = bestRunsData[i].score;
        specificObject.affixWeek = bestRunsData[i].affixes[0].name;
        specificObject.upgrades = bestRunsData[i].num_keystone_upgrades;
        specificObject.completeTime = bestRunsData[i].clear_time_ms;
        specificObject.parTime = bestRunsData[i].par_time_ms;

        if (specificObject.affixWeek === "Fortified"){
        fortRunsExtracted.push(specificObject);
        } else {
        tyrRunsExtracted.push(specificObject);
        }
}};

//extract from alt runs to relevant array

function extractAltRuns(){
    let altRunsData = data.mythic_plus_alternate_runs;
    for(let i=0; i<altRunsData.length; i++){
        let specificObject={};

        specificObject.dungeon = altRunsData[i].dungeon;
        specificObject.keyLevel = altRunsData[i].mythic_level;
        specificObject.score = altRunsData[i].score;
        specificObject.affixWeek = altRunsData[i].affixes[0].name;
        specificObject.upgrades = altRunsData[i].num_keystone_upgrades;

        if (specificObject.affixWeek === "Tyrannical"){
            tyrRunsExtracted.push(specificObject);
        } else {
            fortRunsExtracted.push(specificObject);
        }
    }
};

extractAltRuns();
extractBestRuns();

//sort arrays by dungeon alphabetically
function sortFort(){
    fortRunsExtracted.sort((a,b) => {
        const nameA = a.dungeon.toUpperCase(); // ignore upper and lowercase
        const nameB = b.dungeon.toUpperCase(); // ignore upper and lowercase
        if (nameA < nameB) {
            return -1;
        }
        if (nameA > nameB) {
            return 1;
        }
        // names must be equal
        return 0;
    });
}

function sortTyr(){
    tyrRunsExtracted.sort((a,b) => {
        const nameA = a.dungeon.toUpperCase(); // ignore upper and lowercase
        const nameB = b.dungeon.toUpperCase(); // ignore upper and lowercase
        if (nameA < nameB) {
            return -1;
        }
        if (nameA > nameB) {
            return 1;
        }
        // names must be equal
        return 0;
    });
}

sortFort();
sortTyr();

//check array for missing runs and insert blank ones in the correct spaces
function populateFort(){
    for(let i=0; i<dungeons.length; i++){
        let specificObject = {dungeon:dungeons[i],keyLevel:0,score:0,affixWeek:"Fortified",upgrades:0};
        if (fortRunsExtracted[i].dungeon != dungeons[i]){
            fortRunsExtracted.splice(i,0,specificObject)
        }
    }
}

function populateTyr(){
    for(let i=0; i<dungeons.length; i++){
        let specificObject = {dungeon:dungeons[i],keyLevel:0,score:0,affixWeek:"Tyrannical",upgrades:0};
        if (tyrRunsExtracted[i].dungeon != dungeons[i]){
            tyrRunsExtracted.splice(i,0,specificObject)
        }
    }
}

//only calls above function if we dont have a run for each dungeon
if (fortRunsExtracted.length != dungeons.length){
    populateFort();
}

if (tyrRunsExtracted.length != dungeons.length){
    populateTyr();
}

//computes the weighted scores for m+ rating

function weightScores(){
    for (let i=0; i<fortRunsExtracted.length; i++){
    let score1 = fortRunsExtracted[i].score;
    let score2 = tyrRunsExtracted[i].score;

    if (score1 > score2) {
        fortRunsExtracted[i].weightedScore = (score1*1.5);
        fortRunsExtracted[i].isBest = true;
        tyrRunsExtracted[i].weightedScore = (score2*0.5);
        tyrRunsExtracted[i].isBest = false;        
    } else if (score2 > score1) {
        fortRunsExtracted[i].weightedScore = (score1*0.5);
        fortRunsExtracted[i].isBest = false;
        tyrRunsExtracted[i].weightedScore = (score2*1.5);
        tyrRunsExtracted[i].isBest = true; 
    } else {
        fortRunsExtracted[i].weightedScore = score1;
        fortRunsExtracted[i].isBest = true;
        tyrRunsExtracted[i].weightedScore = score2;
        tyrRunsExtracted[i].isBest = true; 
    }
    } 
}

weightScores();

function weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,keyLevel){

    //calculates base score for timing a key (minimum possible timing)
    let completionScore = null;
    const dungeonBaseScores = [0,40,45,55,60,65,75,80,85,100];

    if (keyLevel<=10){
        completionScore = dungeonBaseScores[keyLevel];
    } else {
        completionScore = (100 + 7*(keyLevel-10)) 
    }  
    //checks if calculated score will be new best and returns the weighted gain
    let compScore = completionScore;
    let baseTyr = tyrCurrentBase;
    let baseFort = fortCurrentBase;
    let testAffix = affix;
    let weightedGain = null;
    if (testAffix === "Fortified" && baseFort>baseTyr) {
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix==="Tyrannical" && baseTyr>baseFort) {
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - ((baseFort*0.5)+(baseTyr*1.5));
    } else if (testAffix === "Fortified" && baseTyr>baseFort && compScore>baseTyr){
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - ((baseTyr*1.5)+(baseFort*0.5));
    } else if (testAffix === "Fortified" && baseTyr>baseFort && compScore<baseTyr ) {
        weightedGain = ((compScore*0.5)+(baseTyr*1.5)) - ((baseTyr*1.5)+(baseFort*0.5));
    } else if (testAffix === "Tyrannical" && baseFort>baseTyr && compScore>baseFort){
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix === "Tyrannical" && baseFort>baseTyr && compScore<baseFort){
        weightedGain = ((compScore*0.5)+(baseFort*1.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix === "Fortified" && baseFort===baseTyr) {
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - (baseFort+baseTyr);
    } else if (testAffix==="Tyrannical" && baseTyr===baseFort) {
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - (baseFort+baseTyr);
    }

    if (weightedGain<0){
        return 0;
    } else {
        return weightedGain;
    }
}

function generateNextKeyGains() {
    for (let i=0; i<fortRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Fortified";
        let level = fortRunsExtracted[i].keyLevel + 1;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        fortRunsExtracted[i].nextKeyGain = weightedGain;
    }
        for (let i=0; i<tyrRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Tyrannical";
        let level = tyrRunsExtracted[i].keyLevel + 1;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        tyrRunsExtracted[i].nextKeyGain = weightedGain;
    }
}

generateNextKeyGains();

function generateUserKeyGains() {
    for (let i=0; i<fortRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Fortified";
        let level = userKeyLevel;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        fortRunsExtracted[i].userKeyGain = weightedGain;
    }
        for (let i=0; i<tyrRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Tyrannical";
        let level = userKeyLevel;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        tyrRunsExtracted[i].userKeyGain = weightedGain;
    }
}

generateUserKeyGains();

function keyUpgrades(){
    const plusUpgrades =["","+","++","+++"];
    for (let i=0; i<fortRunsExtracted.length; i++){
        fortRunsExtracted[i].plus = plusUpgrades[fortRunsExtracted[i].upgrades]
    }
    for (let i=0; i<tyrRunsExtracted.length; i++){
    tyrRunsExtracted[i].plus = plusUpgrades[tyrRunsExtracted[i].upgrades]
    }
}

keyUpgrades();

const totalScore = function(){
    let fortScores = 0

    for (let i=0; i<fortRunsExtracted.length; i++){
        fortScores += fortRunsExtracted[i].weightedScore;
    }

    let tyrScores = 0

    for (let i=0; i<tyrRunsExtracted.length; i++){
        tyrScores += tyrRunsExtracted[i].weightedScore;
    }

    return (fortScores+tyrScores).toFixed(0);
}

---

<div class="grid grid-rows-1 grid-cols-5 text-center">
    <div class="mb-4 font-bold"><h1>{userName}</h1></div>
    <div class="mb-4 font-bold"><h1>{userRealm}</h1></div>
    <div class="mb-4 font-bold"><h1>{userRegion}</h1></div>
    <div class="mb-4 font-bold"><h1>Current Score: {totalScore}</h1></div>
    <div class="mb-4 font-bold"><h1>User Key Level: {userKeyLevel}</h1></div>
    <div class="col-span-5">
    <table class="border-collapse table-auto w-full text-center border-spacing-1">
    <thead>
    <tr>
      <th class="border-solid border-2" rowspan="2">Dungeon</th>
      <th class="border-solid border-2" colspan="2">Fortified</th>
      <th class="border-solid border-2" colspan="2">Tyrannical</th>
      <th class="border-solid border-2" colspan="2">Gain next key<sup>+</sup></th>
      <th class="border-solid border-2" colspan="2">Gain user key<sup>+</sup> ({userKeyLevel})</th>
    </tr>
    <tr>
      <th class="border-solid border-2">Level</th>
      <th class="border-solid border-2">Score</th>
      <th class="border-solid border-2">Level</th>
      <th class="border-solid border-2">Score</th>
      <th class="border-solid border-2">Fortified</th>
      <th class="border-solid border-2">Tyrannical</th>
      <th class="border-solid border-2">Fortified</th>
      <th class="border-solid border-2">Tyrannical</th>
    </tr>
    </thead>
    <tbody>
    <tr>
      <td class="border-solid border-2">{dungeons[0]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[0].keyLevel}<sup>{fortRunsExtracted[0].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[0].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[0].keyLevel}<sup>{tyrRunsExtracted[0].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[0].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[0].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[0].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[0].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[0].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[1]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[1].keyLevel}<sup>{fortRunsExtracted[1].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[1].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[1].keyLevel}<sup>{tyrRunsExtracted[1].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[1].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[1].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[1].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[1].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[1].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[2]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[2].keyLevel}<sup>{fortRunsExtracted[2].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[2].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[2].keyLevel}<sup>{tyrRunsExtracted[2].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[2].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[2].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[2].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[2].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[2].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[3]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[3].keyLevel}<sup>{fortRunsExtracted[3].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[3].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[3].keyLevel}<sup>{tyrRunsExtracted[3].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[3].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[3].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[3].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[3].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[3].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[4]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[4].keyLevel}<sup>{fortRunsExtracted[4].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[4].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[4].keyLevel}<sup>{tyrRunsExtracted[4].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[4].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[4].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[4].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[4].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[4].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[5]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[5].keyLevel}<sup>{fortRunsExtracted[5].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[5].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[5].keyLevel}<sup>{tyrRunsExtracted[5].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[5].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[5].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[5].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[5].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[5].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[6]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[6].keyLevel}<sup>{fortRunsExtracted[6].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[6].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[6].keyLevel}<sup>{tyrRunsExtracted[6].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[6].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[6].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[6].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[6].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[6].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[7]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[7].keyLevel}<sup>{fortRunsExtracted[7].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[7].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[7].keyLevel}<sup>{tyrRunsExtracted[7].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[7].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[7].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[7].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[7].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[7].userKeyGain.toFixed(1)}</td>
    </tr>
    </tbody>
    </table>
    </div>
</div>
