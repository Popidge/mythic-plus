---

const {userRegion,userRealm,userName} = Astro.props;

const apiCall = await fetch('https://raider.io/api/v1/characters/profile?region=' +userRegion+ '&realm=' +userRealm+ '&name=' +userName+ '&fields=mythic_plus_best_runs:all,mythic_plus_alternate_runs:all')
const data = await apiCall.json();

const dungeons = ["Algeth'ar Academy", "Court of Stars","Halls of Valor","Ruby Life Pools","Shadowmoon Burial Grounds","Temple of the Jade Serpent","The Azure Vault","The Nokhud Offensive",];

//create arrays for fort and tyr runs
let fortRunsExtracted = [];
let tyrRunsExtracted = [];

//REWRITE - EXTRACTING THE DATA FROM R.IO INTO SEPARATE ARRAYS FOR FORT+TYR


function populateDefaults(){
	for (let i=0; i<dungeons.length; i++){
    let defaultFortObject = {};
    
    defaultFortObject.dungeon = dungeons[i];
    defaultFortObject.keyLevel = 0;
    defaultFortObject.score = 0;
    defaultFortObject.affixWeek = "Fortified";
    defaultFortObject.upgrades = 0;
    
    fortRunsExtracted.push(defaultFortObject);
    
    let defaultTyrObject={};

    defaultTyrObject.dungeon = dungeons[i];
    defaultTyrObject.keyLevel = 0;
    defaultTyrObject.score = 0;
    defaultTyrObject.affixWeek = "Tyrannical";
    defaultTyrObject.upgrades = 0;

    tyrRunsExtracted.push(defaultTyrObject);
    
  }
}

populateDefaults();

//For each dungeon, loop through the best and alt runs if they exist, check which dungeon/affix it is for and replace the values in the blank array

function replaceWithData(){
	let bestRunsData = data.mythic_plus_best_runs;
  for (let i=0; i<dungeons.length;i++){
  	if (bestRunsData.length === 0){
    	return;
    } else {
    	for (let x=0; x<bestRunsData.length;x++){
      	if (bestRunsData[x].dungeon === dungeons[i] && bestRunsData[x].affixes[0].name === "Fortified"){
        	fortRunsExtracted[i].keyLevel = bestRunsData[x].mythic_level;
          fortRunsExtracted[i].score = bestRunsData[x].score;
          fortRunsExtracted[i].upgrades = bestRunsData[x].num_keystone_upgrades;
        } else if (bestRunsData[x].dungeon === dungeons[i] && bestRunsData[x].affixes[0].name === "Tyrannical") {
          tyrRunsExtracted[i].keyLevel = bestRunsData[x].mythic_level;
          tyrRunsExtracted[i].score = bestRunsData[x].score;
          tyrRunsExtracted[i].upgrades = bestRunsData[x].num_keystone_upgrades;
        }
      }
    }
  }
  
  let altRunsData = data.mythic_plus_alternate_runs;
 	for (let i=0; i<dungeons.length;i++){
  	if (altRunsData.length === 0){
    	return;
    } else {
    	for (let x=0; x<altRunsData.length;x++){
      	if (altRunsData[x].dungeon === dungeons[i] && altRunsData[x].affixes[0].name === "Fortified"){
        	fortRunsExtracted[i].keyLevel = altRunsData[x].mythic_level;
          fortRunsExtracted[i].score = altRunsData[x].score;
          fortRunsExtracted[i].upgrades = altRunsData[x].num_keystone_upgrades;
        } else if (altRunsData[x].dungeon === dungeons[i] && altRunsData[x].affixes[0].name === "Tyrannical") {
          tyrRunsExtracted[i].keyLevel = altRunsData[x].mythic_level;
          tyrRunsExtracted[i].score = altRunsData[x].score;
          tyrRunsExtracted[i].upgrades = altRunsData[x].num_keystone_upgrades;
        }
      }
    }  
	}
}

let displayName = '';
let displayRealm = '';
let displayRegion =''

//input error handling: raider.io returns 400 for char/realm not found. Defaults and displaynames only if code 400
//TODO handle other error codes

if (data.statusCode != 400){
    replaceWithData();
    displayName = userName;
    displayRealm = userRealm;
    displayRegion = userRegion;
} else {
    displayName = "Error";
    if (data.message === "Could not find requested character"){
        displayRealm = "Character not found!"
    } else {
        displayRealm = "Incorrect server name!"
    }
    displayRegion = "Try again!";
}

//computes the weighted scores for m+ rating

function weightScores(){
    for (let i=0; i<fortRunsExtracted.length; i++){
    let score1 = fortRunsExtracted[i].score;
    let score2 = tyrRunsExtracted[i].score;

    if (score1 > score2) {
        fortRunsExtracted[i].weightedScore = (score1*1.5);
        fortRunsExtracted[i].isBest = true;
        tyrRunsExtracted[i].weightedScore = (score2*0.5);
        tyrRunsExtracted[i].isBest = false;        
    } else if (score2 > score1) {
        fortRunsExtracted[i].weightedScore = (score1*0.5);
        fortRunsExtracted[i].isBest = false;
        tyrRunsExtracted[i].weightedScore = (score2*1.5);
        tyrRunsExtracted[i].isBest = true; 
    } else {
        fortRunsExtracted[i].weightedScore = score1;
        fortRunsExtracted[i].isBest = true;
        tyrRunsExtracted[i].weightedScore = score2;
        tyrRunsExtracted[i].isBest = true; 
    }
    } 
}

weightScores();

function weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,keyLevel){

    //calculates base score for timing a key (minimum possible timing)
    let completionScore = null;
    const dungeonBaseScores = [0,40,45,55,60,65,75,80,85,100];

    if (keyLevel<=10){
        completionScore = dungeonBaseScores[keyLevel];
    } else {
        completionScore = (100 + 7*(keyLevel-10)) 
    }  
    //checks if calculated score will be new best and returns the weighted gain
    let compScore = completionScore;
    let baseTyr = tyrCurrentBase;
    let baseFort = fortCurrentBase;
    let testAffix = affix;
    let weightedGain = 0;
    if (testAffix === "Fortified" && baseFort>baseTyr) {
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix==="Tyrannical" && baseTyr>baseFort) {
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - ((baseFort*0.5)+(baseTyr*1.5));
    } else if (testAffix === "Fortified" && baseTyr>baseFort && compScore>baseTyr){
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - ((baseTyr*1.5)+(baseFort*0.5));
    } else if (testAffix === "Fortified" && baseTyr>baseFort && compScore<baseTyr ) {
        weightedGain = ((compScore*0.5)+(baseTyr*1.5)) - ((baseTyr*1.5)+(baseFort*0.5));
    } else if (testAffix === "Tyrannical" && baseFort>baseTyr && compScore>baseFort){
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix === "Tyrannical" && baseFort>baseTyr && compScore<baseFort){
        weightedGain = ((compScore*0.5)+(baseFort*1.5)) - ((baseFort*1.5)+(baseTyr*0.5));
    } else if (testAffix === "Fortified" && baseFort===baseTyr) {
        weightedGain = ((compScore*1.5)+(baseTyr*0.5)) - (baseFort+baseTyr);
    } else if (testAffix==="Tyrannical" && baseTyr===baseFort) {
        weightedGain = ((compScore*1.5)+(baseFort*0.5)) - (baseFort+baseTyr);
    }

    if (weightedGain<0){
        return 0;
    } else {
        return weightedGain;
    }
}

function generateNextKeyGains() {
    for (let i=0; i<fortRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Fortified";
        let level = fortRunsExtracted[i].keyLevel + 1;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        fortRunsExtracted[i].nextKeyGain = weightedGain;
    }
        for (let i=0; i<tyrRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Tyrannical";
        let level = tyrRunsExtracted[i].keyLevel + 1;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        tyrRunsExtracted[i].nextKeyGain = weightedGain;
    }
}

generateNextKeyGains();

//gets highest timed key level of current runs

function generateHighestKey(){
    let highestKey = 0

    for (let i = 0; i<fortRunsExtracted.length; i++){
        if (fortRunsExtracted[i].keyLevel > highestKey && fortRunsExtracted[i].upgrades > 0){
            highestKey = fortRunsExtracted[i].keyLevel;
        } else if (fortRunsExtracted[i].keyLevel > highestKey) {
            highestKey = fortRunsExtracted[i].keyLevel;
        }
    }

    for (let i = 0; i<tyrRunsExtracted.length; i++){
        if (tyrRunsExtracted[i].keyLevel > highestKey && tyrRunsExtracted[i].upgrades > 0){
            highestKey = tyrRunsExtracted[i].keyLevel;
        } else if (tyrRunsExtracted[i].keyLevel > highestKey) {
            highestKey = fortRunsExtracted[i].keyLevel;
        }
    }

    return highestKey;
}

const highestKey = generateHighestKey();

const userKeyLevel = highestKey;

function generateUserKeyGains() {
    for (let i=0; i<fortRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Fortified";
        let level = userKeyLevel;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        fortRunsExtracted[i].userKeyGain = weightedGain;
    }
        for (let i=0; i<tyrRunsExtracted.length; i++) {
        let tyrCurrentBase = tyrRunsExtracted[i].score;
        let fortCurrentBase = fortRunsExtracted[i].score;
        let affix = "Tyrannical";
        let level = userKeyLevel;
        let weightedGain = weightCalcScore(tyrCurrentBase,fortCurrentBase,affix,level);
        tyrRunsExtracted[i].userKeyGain = weightedGain;
    }
}

generateUserKeyGains();

function keyUpgrades(){
    const plusUpgrades =["","+","++","+++"];
    for (let i=0; i<fortRunsExtracted.length; i++){
        fortRunsExtracted[i].plus = plusUpgrades[fortRunsExtracted[i].upgrades]
    }
    for (let i=0; i<tyrRunsExtracted.length; i++){
    tyrRunsExtracted[i].plus = plusUpgrades[tyrRunsExtracted[i].upgrades]
    }
}

keyUpgrades();

//calculates current total score

const totalScore = function(){
    let fortScores = 0

    for (let i=0; i<fortRunsExtracted.length; i++){
        fortScores += fortRunsExtracted[i].weightedScore;
    }

    let tyrScores = 0

    for (let i=0; i<tyrRunsExtracted.length; i++){
        tyrScores += tyrRunsExtracted[i].weightedScore;
    }

    return (fortScores+tyrScores).toFixed(0);
}

const {fortRunsData = fortRunsExtracted, tyrRunsData = tyrRunsExtracted} = Astro.props;

---

<div class="grid grid-rows-1 grid-cols-5 text-center m-10 dark:text-slate-300">
    <div class="mb-4 font-bold capitalize"><h1>{displayName}</h1></div>
    <div class="mb-4 font-bold capitalize"><h1>{displayRealm}</h1></div>
    <div class="mb-4 font-bold uppercase"><h1>{displayRegion}</h1></div>
    <div class="mb-4 font-bold"><h1>Current Score: {totalScore}</h1></div>
    <div class="mb-4 font-bold"><h1>Highest Timed Level: {userKeyLevel}</h1></div>
    <div class="col-span-5">
    <table class="border-collapse table-auto w-full text-center border-spacing-1">
    <thead>
    <tr>
      <th class="border-solid border-2" rowspan="2">Dungeon</th>
      <th class="border-solid border-2" colspan="2">Fortified</th>
      <th class="border-solid border-2" colspan="2">Tyrannical</th>
      <th class="border-solid border-2" colspan="2">Gain next key<sup>+</sup></th>
      <th class="border-solid border-2" colspan="2">Gain highest key<sup>+</sup> ({userKeyLevel})</th>
    </tr>
    <tr>
      <th class="border-solid border-2">Level</th>
      <th class="border-solid border-2">Score</th>
      <th class="border-solid border-2">Level</th>
      <th class="border-solid border-2">Score</th>
      <th class="border-solid border-2">Fortified</th>
      <th class="border-solid border-2">Tyrannical</th>
      <th class="border-solid border-2">Fortified</th>
      <th class="border-solid border-2">Tyrannical</th>
    </tr>
    </thead>
    <tbody>
    <tr>
      <td class="border-solid border-2">{dungeons[0]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[0].keyLevel}<sup>{fortRunsExtracted[0].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[0].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[0].keyLevel}<sup>{tyrRunsExtracted[0].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[0].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[0].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[0].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[0].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[0].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[1]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[1].keyLevel}<sup>{fortRunsExtracted[1].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[1].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[1].keyLevel}<sup>{tyrRunsExtracted[1].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[1].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[1].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[1].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[1].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[1].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[2]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[2].keyLevel}<sup>{fortRunsExtracted[2].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[2].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[2].keyLevel}<sup>{tyrRunsExtracted[2].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[2].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[2].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[2].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[2].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[2].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[3]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[3].keyLevel}<sup>{fortRunsExtracted[3].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[3].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[3].keyLevel}<sup>{tyrRunsExtracted[3].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[3].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[3].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[3].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[3].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[3].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[4]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[4].keyLevel}<sup>{fortRunsExtracted[4].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[4].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[4].keyLevel}<sup>{tyrRunsExtracted[4].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[4].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[4].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[4].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[4].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[4].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[5]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[5].keyLevel}<sup>{fortRunsExtracted[5].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[5].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[5].keyLevel}<sup>{tyrRunsExtracted[5].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[5].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[5].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[5].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[5].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[5].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[6]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[6].keyLevel}<sup>{fortRunsExtracted[6].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[6].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[6].keyLevel}<sup>{tyrRunsExtracted[6].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[6].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[6].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[6].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[6].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[6].userKeyGain.toFixed(1)}</td>
    </tr>
    <tr>
      <td class="border-solid border-2">{dungeons[7]}</td>
      <td class="border-solid border-2">{fortRunsExtracted[7].keyLevel}<sup>{fortRunsExtracted[7].plus}</sup></td>
      <td class="border-solid border-2">{fortRunsExtracted[7].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[7].keyLevel}<sup>{tyrRunsExtracted[7].plus}</sup></td>
      <td class="border-solid border-2">{tyrRunsExtracted[7].weightedScore.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[7].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[7].nextKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{fortRunsExtracted[7].userKeyGain.toFixed(1)}</td>
      <td class="border-solid border-2">{tyrRunsExtracted[7].userKeyGain.toFixed(1)}</td>
    </tr>
    </tbody>
    </table>
    </div>
</div>

<div class="grid grid-cols-2 lg:grid-cols-5 text-center m-10 dark:text-slate-300">
    <div>
        <table class="table-auto">
            <thead>
                <tr>
                    <th rowspan="2">Dungeon</td>
                </tr>
            </thead>
            <tbody>
                <tr><td>{dungeons[0]}</td></tr>
                <tr><td>{dungeons[1]}</td></tr>
                <tr><td>{dungeons[2]}</td></tr>
                <tr><td>{dungeons[3]}</td></tr>
                <tr><td>{dungeons[4]}</td></tr>
                <tr><td>{dungeons[5]}</td></tr>
                <tr><td>{dungeons[6]}</td></tr>
                <tr><td>{dungeons[7]}</td></tr>
            </tbody>
        </table>
    </div>
</div>